"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ExternalLinkIcon } from "@radix-ui/react-icons";
import { formatExplorerAddressUrl } from "../../../../utils/url.js";
import { iconSize } from "../../../core/design-system/index.js";
import { useChainExplorers } from "../../../core/hooks/others/useChainQuery.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../core/hooks/wallets/useActiveWallet.js";
import { useActiveWalletChain } from "../../../core/hooks/wallets/useActiveWalletChain.js";
import { LoadingScreen } from "../../wallets/shared/LoadingScreen.js";
import { Spacer } from "../components/Spacer.js";
import { Container, Line, ModalHeader } from "../components/basic.js";
import { ButtonLink } from "../components/buttons.js";
import { WalletTransactionHistory } from "./screens/WalletTransactionHistory.js";
/**
 * @internal
 */
export function TransactionsScreen(props) {
    const activeChain = useActiveWalletChain();
    const activeWallet = useActiveWallet();
    const activeAccount = useActiveAccount();
    const chainExplorers = useChainExplorers(activeChain);
    const payer = activeChain && activeAccount && activeWallet
        ? { chain: activeChain, account: activeAccount, wallet: activeWallet }
        : undefined;
    if (!payer) {
        return _jsx(LoadingScreen, {});
    }
    return (_jsxs(Container, { animate: "fadein", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: props.locale.transactions, onBack: props.onBack }) }), _jsx(Line, {}), _jsxs(Container, { px: "lg", scrollY: true, style: {
                    minHeight: "330px",
                }, children: [_jsx(Spacer, { y: "md" }), _jsx(WalletTransactionHistory, { locale: props.locale, client: props.client, address: payer.account.address })] }), _jsx(Line, {}), _jsx(Container, { p: "lg", children: _jsxs(ButtonLink, { fullWidth: true, variant: "outline", href: formatExplorerAddressUrl(chainExplorers.explorers[0]?.url ?? "", activeAccount?.address ?? ""), target: "_blank", as: "a", gap: "xs", style: {
                        textDecoration: "none",
                        color: "inherit",
                    }, children: ["View on Explorer", _jsx(ExternalLinkIcon, { width: iconSize.sm, height: iconSize.sm })] }) })] }));
}
//# sourceMappingURL=TransactionsScreen.js.map