import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from "react";
import { trackPayEvent } from "../../../../../../../analytics/track/pay.js";
import { NATIVE_TOKEN_ADDRESS } from "../../../../../../../constants/addresses.js";
import { FiatProviders, } from "../../../../../../../pay/utils/commonTypes.js";
import { useBuyWithFiatQuote } from "../../../../../../core/hooks/pay/useBuyWithFiatQuote.js";
import { PREFERRED_FIAT_PROVIDER_STORAGE_KEY } from "../../../../../../core/utils/storage.js";
import { getErrorMessage } from "../../../../../utils/errors.js";
import { Drawer, DrawerOverlay, useDrawer, } from "../../../../components/Drawer.js";
import { Spacer } from "../../../../components/Spacer.js";
import { Spinner } from "../../../../components/Spinner.js";
import { Container } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { Text } from "../../../../components/text.js";
import { isNativeToken } from "../../nativeToken.js";
import { EstimatedTimeAndFees } from "../EstimatedTimeAndFees.js";
import { PayProviderSelection } from "../PayProviderSelection.js";
import { PayWithCreditCard } from "../PayWIthCreditCard.js";
import { FiatFees } from "../swap/Fees.js";
import { Providers } from "./Providers.js";
export function FiatScreenContent(props) {
    const { toToken, tokenAmount, payer, client, setScreen, toChain, showCurrencySelector, selectedCurrency, paymentLinkId, } = props;
    const defaultRecipientAddress = props.payOptions?.paymentInfo?.sellerAddress;
    const receiverAddress = defaultRecipientAddress || props.payer.account.address;
    const { drawerRef, drawerOverlayRef, isOpen, setIsOpen } = useDrawer();
    const [drawerScreen, setDrawerScreen] = useState("fees");
    const buyWithFiatOptions = props.payOptions.buyWithFiat;
    const [preferredProvider, setPreferredProvider] = useState(buyWithFiatOptions !== false
        ? buyWithFiatOptions?.preferredProvider ||
            (localStorage.getItem(PREFERRED_FIAT_PROVIDER_STORAGE_KEY) ??
                undefined)
        : undefined);
    const supportedProviders = (() => {
        if (!buyWithFiatOptions)
            return [...FiatProviders];
        const options = buyWithFiatOptions?.supportedProviders ?? [];
        const optionsWithPreferred = options.length > 0
            ? new Set([
                ...(preferredProvider ? [preferredProvider] : []),
                ...options,
            ])
            : FiatProviders;
        return Array.from(optionsWithPreferred);
    })();
    const fiatQuoteQuery = useBuyWithFiatQuote(buyWithFiatOptions !== false && tokenAmount
        ? {
            fromCurrencySymbol: selectedCurrency.shorthand,
            toChainId: toChain.id,
            toAddress: receiverAddress,
            toTokenAddress: isNativeToken(toToken)
                ? NATIVE_TOKEN_ADDRESS
                : toToken.address,
            toAmount: tokenAmount,
            client,
            isTestMode: buyWithFiatOptions?.testMode,
            purchaseData: props.payOptions.purchaseData,
            fromAddress: payer.account.address,
            paymentLinkId: paymentLinkId,
            preferredProvider: preferredProvider ?? supportedProviders[0],
            onrampChainId: buyWithFiatOptions?.onrampChainId,
            onrampTokenAddress: buyWithFiatOptions?.onrampTokenAddress,
        }
        : undefined);
    function handleSubmit() {
        if (!fiatQuoteQuery.data) {
            return;
        }
        setScreen({
            id: "fiat-flow",
            quote: fiatQuoteQuery.data,
        });
    }
    function showFees() {
        if (!fiatQuoteQuery.data) {
            return;
        }
        setDrawerScreen("fees");
        setIsOpen(true);
    }
    function showProviders() {
        setDrawerScreen("providers");
        setIsOpen(true);
    }
    const disableSubmit = !fiatQuoteQuery.data;
    const errorMsg = !fiatQuoteQuery.isLoading && fiatQuoteQuery.error
        ? getErrorMessage(fiatQuoteQuery.error)
        : undefined;
    return (_jsxs(Container, { flex: "column", gap: "lg", animate: "fadein", children: [isOpen && (_jsxs(_Fragment, { children: [_jsx(DrawerOverlay, { ref: drawerOverlayRef }), _jsxs(Drawer, { ref: drawerRef, close: () => setIsOpen(false), children: [drawerScreen === "fees" && fiatQuoteQuery.data && (_jsxs("div", { children: [_jsx(Text, { size: "lg", color: "primaryText", children: "Fees" }), _jsx(Spacer, { y: "lg" }), _jsx(FiatFees, { quote: fiatQuoteQuery.data })] })), drawerScreen === "providers" && (_jsxs("div", { children: [_jsx(Text, { size: "lg", color: "primaryText", children: "Providers" }), _jsx(Spacer, { y: "lg" }), _jsx(Providers, { supportedProviders: supportedProviders, preferredProvider: preferredProvider || fiatQuoteQuery.data?.provider, onSelect: (provider) => {
                                            setPreferredProvider(provider);
                                            // save the pref in local storage
                                            localStorage.setItem(PREFERRED_FIAT_PROVIDER_STORAGE_KEY, provider);
                                            setIsOpen(false);
                                        } })] }))] })] })), _jsxs(Container, { flex: "column", gap: "sm", children: [_jsx(Text, { size: "sm", children: "Pay with card" }), _jsxs("div", { children: [_jsx(PayWithCreditCard, { isLoading: fiatQuoteQuery.isLoading, value: fiatQuoteQuery.data?.fromCurrencyWithFees.amount, client: client, currency: selectedCurrency, onSelectCurrency: showCurrencySelector }), _jsx(PayProviderSelection, { onShowProviders: showProviders, quotedProvider: fiatQuoteQuery.data?.provider, preferredProvider: preferredProvider, supportedProviders: supportedProviders }), _jsx(EstimatedTimeAndFees, { quoteIsLoading: fiatQuoteQuery.isLoading, estimatedSeconds: fiatQuoteQuery.data?.estimatedDurationSeconds, onViewFees: showFees })] }), errorMsg && (_jsxs("div", { children: [_jsx(Text, { color: "danger", size: "xs", center: true, multiline: true, children: errorMsg.title }), _jsx(Text, { size: "xs", center: true, multiline: true, children: errorMsg.message })] }))] }), _jsx(Button, { variant: disableSubmit ? "outline" : "accent", "data-disabled": disableSubmit, disabled: disableSubmit, fullWidth: true, onClick: () => {
                    trackPayEvent({
                        event: "confirm_onramp_quote",
                        client: client,
                        walletAddress: payer.account.address,
                        walletType: payer.wallet.id,
                        toChainId: toChain.id,
                        toToken: isNativeToken(toToken) ? undefined : toToken.address,
                    });
                    handleSubmit();
                }, gap: "xs", children: fiatQuoteQuery.isLoading ? (_jsxs(_Fragment, { children: ["Getting price quote", _jsx(Spinner, { size: "sm" })] })) : ("Continue") })] }));
}
//# sourceMappingURL=FiatScreenContent.js.map