"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = parse;
const v4_mini_1 = require("zod/v4-mini");
const address_js_1 = require("../utils/address.js");
const hex_js_1 = require("../utils/encoding/hex.js");
const hexSchema = v4_mini_1.z
    .string()
    .check(v4_mini_1.z.refine(hex_js_1.isHex, { message: "Invalid hex string" }));
const addressSchema = v4_mini_1.z
    .string()
    .check(v4_mini_1.z.refine(address_js_1.isAddress, { message: "Invalid address" }));
const webhookSchema = v4_mini_1.z.union([
    v4_mini_1.z.object({
        version: v4_mini_1.z.literal(1),
        data: v4_mini_1.z.object({}),
    }),
    v4_mini_1.z.object({
        version: v4_mini_1.z.literal(2),
        data: v4_mini_1.z.object({
            paymentId: v4_mini_1.z.string(),
            // only exists when the payment was triggered from a developer specified payment link
            paymentLinkId: v4_mini_1.z.optional(v4_mini_1.z.string()),
            clientId: v4_mini_1.z.string(),
            action: v4_mini_1.z.enum(["TRANSFER", "BUY", "SELL"]),
            status: v4_mini_1.z.enum(["PENDING", "FAILED", "COMPLETED"]),
            originToken: v4_mini_1.z.object({
                chainId: v4_mini_1.z.coerce.number(),
                address: addressSchema,
                name: v4_mini_1.z.string(),
                symbol: v4_mini_1.z.string(),
                decimals: v4_mini_1.z.coerce.number(),
                priceUsd: v4_mini_1.z.coerce.number(),
                iconUri: v4_mini_1.z.optional(v4_mini_1.z.string()),
            }),
            originAmount: v4_mini_1.z.string(),
            destinationToken: v4_mini_1.z.object({
                chainId: v4_mini_1.z.coerce.number(),
                address: addressSchema,
                name: v4_mini_1.z.string(),
                symbol: v4_mini_1.z.string(),
                decimals: v4_mini_1.z.coerce.number(),
                priceUsd: v4_mini_1.z.coerce.number(),
                iconUri: v4_mini_1.z.optional(v4_mini_1.z.string()),
            }),
            destinationAmount: v4_mini_1.z.string(),
            sender: addressSchema,
            receiver: addressSchema,
            type: v4_mini_1.z.string(),
            transactions: v4_mini_1.z.array(v4_mini_1.z.object({
                chainId: v4_mini_1.z.coerce.number(),
                transactionHash: hexSchema,
            })),
            developerFeeBps: v4_mini_1.z.coerce.number(),
            developerFeeRecipient: addressSchema,
            purchaseData: v4_mini_1.z.optional(v4_mini_1.z.record(v4_mini_1.z.string(), v4_mini_1.z.unknown())),
        }),
    }),
]);
/**
 * Parses an incoming Universal Bridge webhook payload.
 *
 * @param payload - The raw text body received from thirdweb.
 * @param headers - The webhook headers received from thirdweb.
 * @param secret - The webhook secret to verify the payload with.
 * @beta
 * @bridge Webhook
 */
async function parse(
/**
 * Raw text body received from thirdweb.
 */
payload, 
/**
 * The webhook headers received from thirdweb.
 */
headers, 
/**
 * The webhook secret to verify the payload with.
 */
secret, 
/**
 * The tolerance in seconds for the timestamp verification.
 */
tolerance = 300) {
    // Get the signature and timestamp from headers
    const receivedSignature = headers["x-payload-signature"] || headers["x-pay-signature"];
    const receivedTimestamp = headers["x-timestamp"] || headers["x-pay-timestamp"];
    if (!receivedSignature || !receivedTimestamp) {
        throw new Error("Missing required webhook headers: signature or timestamp");
    }
    // Verify timestamp
    const now = Math.floor(Date.now() / 1000);
    const timestamp = Number.parseInt(receivedTimestamp, 10);
    const diff = Math.abs(now - timestamp);
    if (diff > tolerance) {
        throw new Error(`Webhook timestamp is too old. Difference: ${diff}s, tolerance: ${tolerance}s`);
    }
    // Generate signature using the same method as the sender
    const encoder = new TextEncoder();
    const key = await crypto.subtle.importKey("raw", encoder.encode(secret), { name: "HMAC", hash: "SHA-256" }, false, ["sign"]);
    const signature = await crypto.subtle.sign("HMAC", key, encoder.encode(`${receivedTimestamp}.${payload}`));
    // Convert the signature to hex string
    const computedSignature = Array.from(new Uint8Array(signature))
        .map((b) => b.toString(16).padStart(2, "0"))
        .join("");
    // Compare signatures
    if (computedSignature !== receivedSignature) {
        throw new Error("Invalid webhook signature");
    }
    // Parse the payload as JSON
    let payloadObject;
    try {
        payloadObject = JSON.parse(payload);
    }
    catch {
        throw new Error("Invalid webhook payload: not valid JSON");
    }
    const parsedPayload = webhookSchema.parse(payloadObject);
    // v1 is no longer supported
    if (parsedPayload.version === 1) {
        throw new Error("Invalid webhook payload: version 1 is no longer supported, please upgrade to webhook version 2.");
    }
    return parsedPayload;
}
//# sourceMappingURL=Webhook.js.map