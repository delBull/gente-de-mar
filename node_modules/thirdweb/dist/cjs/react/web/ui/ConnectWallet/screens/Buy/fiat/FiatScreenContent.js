"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FiatScreenContent = FiatScreenContent;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const pay_js_1 = require("../../../../../../../analytics/track/pay.js");
const addresses_js_1 = require("../../../../../../../constants/addresses.js");
const commonTypes_js_1 = require("../../../../../../../pay/utils/commonTypes.js");
const useBuyWithFiatQuote_js_1 = require("../../../../../../core/hooks/pay/useBuyWithFiatQuote.js");
const storage_js_1 = require("../../../../../../core/utils/storage.js");
const errors_js_1 = require("../../../../../utils/errors.js");
const Drawer_js_1 = require("../../../../components/Drawer.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const Spinner_js_1 = require("../../../../components/Spinner.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const text_js_1 = require("../../../../components/text.js");
const nativeToken_js_1 = require("../../nativeToken.js");
const EstimatedTimeAndFees_js_1 = require("../EstimatedTimeAndFees.js");
const PayProviderSelection_js_1 = require("../PayProviderSelection.js");
const PayWIthCreditCard_js_1 = require("../PayWIthCreditCard.js");
const Fees_js_1 = require("../swap/Fees.js");
const Providers_js_1 = require("./Providers.js");
function FiatScreenContent(props) {
    const { toToken, tokenAmount, payer, client, setScreen, toChain, showCurrencySelector, selectedCurrency, paymentLinkId, } = props;
    const defaultRecipientAddress = props.payOptions?.paymentInfo?.sellerAddress;
    const receiverAddress = defaultRecipientAddress || props.payer.account.address;
    const { drawerRef, drawerOverlayRef, isOpen, setIsOpen } = (0, Drawer_js_1.useDrawer)();
    const [drawerScreen, setDrawerScreen] = (0, react_1.useState)("fees");
    const buyWithFiatOptions = props.payOptions.buyWithFiat;
    const [preferredProvider, setPreferredProvider] = (0, react_1.useState)(buyWithFiatOptions !== false
        ? buyWithFiatOptions?.preferredProvider ||
            (localStorage.getItem(storage_js_1.PREFERRED_FIAT_PROVIDER_STORAGE_KEY) ??
                undefined)
        : undefined);
    const supportedProviders = (() => {
        if (!buyWithFiatOptions)
            return [...commonTypes_js_1.FiatProviders];
        const options = buyWithFiatOptions?.supportedProviders ?? [];
        const optionsWithPreferred = options.length > 0
            ? new Set([
                ...(preferredProvider ? [preferredProvider] : []),
                ...options,
            ])
            : commonTypes_js_1.FiatProviders;
        return Array.from(optionsWithPreferred);
    })();
    const fiatQuoteQuery = (0, useBuyWithFiatQuote_js_1.useBuyWithFiatQuote)(buyWithFiatOptions !== false && tokenAmount
        ? {
            fromCurrencySymbol: selectedCurrency.shorthand,
            toChainId: toChain.id,
            toAddress: receiverAddress,
            toTokenAddress: (0, nativeToken_js_1.isNativeToken)(toToken)
                ? addresses_js_1.NATIVE_TOKEN_ADDRESS
                : toToken.address,
            toAmount: tokenAmount,
            client,
            isTestMode: buyWithFiatOptions?.testMode,
            purchaseData: props.payOptions.purchaseData,
            fromAddress: payer.account.address,
            paymentLinkId: paymentLinkId,
            preferredProvider: preferredProvider ?? supportedProviders[0],
            onrampChainId: buyWithFiatOptions?.onrampChainId,
            onrampTokenAddress: buyWithFiatOptions?.onrampTokenAddress,
        }
        : undefined);
    function handleSubmit() {
        if (!fiatQuoteQuery.data) {
            return;
        }
        setScreen({
            id: "fiat-flow",
            quote: fiatQuoteQuery.data,
        });
    }
    function showFees() {
        if (!fiatQuoteQuery.data) {
            return;
        }
        setDrawerScreen("fees");
        setIsOpen(true);
    }
    function showProviders() {
        setDrawerScreen("providers");
        setIsOpen(true);
    }
    const disableSubmit = !fiatQuoteQuery.data;
    const errorMsg = !fiatQuoteQuery.isLoading && fiatQuoteQuery.error
        ? (0, errors_js_1.getErrorMessage)(fiatQuoteQuery.error)
        : undefined;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "lg", animate: "fadein", children: [isOpen && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Drawer_js_1.DrawerOverlay, { ref: drawerOverlayRef }), (0, jsx_runtime_1.jsxs)(Drawer_js_1.Drawer, { ref: drawerRef, close: () => setIsOpen(false), children: [drawerScreen === "fees" && fiatQuoteQuery.data && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "lg", color: "primaryText", children: "Fees" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(Fees_js_1.FiatFees, { quote: fiatQuoteQuery.data })] })), drawerScreen === "providers" && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "lg", color: "primaryText", children: "Providers" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(Providers_js_1.Providers, { supportedProviders: supportedProviders, preferredProvider: preferredProvider || fiatQuoteQuery.data?.provider, onSelect: (provider) => {
                                            setPreferredProvider(provider);
                                            // save the pref in local storage
                                            localStorage.setItem(storage_js_1.PREFERRED_FIAT_PROVIDER_STORAGE_KEY, provider);
                                            setIsOpen(false);
                                        } })] }))] })] })), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "sm", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: "Pay with card" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(PayWIthCreditCard_js_1.PayWithCreditCard, { isLoading: fiatQuoteQuery.isLoading, value: fiatQuoteQuery.data?.fromCurrencyWithFees.amount, client: client, currency: selectedCurrency, onSelectCurrency: showCurrencySelector }), (0, jsx_runtime_1.jsx)(PayProviderSelection_js_1.PayProviderSelection, { onShowProviders: showProviders, quotedProvider: fiatQuoteQuery.data?.provider, preferredProvider: preferredProvider, supportedProviders: supportedProviders }), (0, jsx_runtime_1.jsx)(EstimatedTimeAndFees_js_1.EstimatedTimeAndFees, { quoteIsLoading: fiatQuoteQuery.isLoading, estimatedSeconds: fiatQuoteQuery.data?.estimatedDurationSeconds, onViewFees: showFees })] }), errorMsg && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", size: "xs", center: true, multiline: true, children: errorMsg.title }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", center: true, multiline: true, children: errorMsg.message })] }))] }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: disableSubmit ? "outline" : "accent", "data-disabled": disableSubmit, disabled: disableSubmit, fullWidth: true, onClick: () => {
                    (0, pay_js_1.trackPayEvent)({
                        event: "confirm_onramp_quote",
                        client: client,
                        walletAddress: payer.account.address,
                        walletType: payer.wallet.id,
                        toChainId: toChain.id,
                        toToken: (0, nativeToken_js_1.isNativeToken)(toToken) ? undefined : toToken.address,
                    });
                    handleSubmit();
                }, gap: "xs", children: fiatQuoteQuery.isLoading ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: ["Getting price quote", (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm" })] })) : ("Continue") })] }));
}
//# sourceMappingURL=FiatScreenContent.js.map